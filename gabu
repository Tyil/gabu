#! /usr/bin/env perl

$|++;

use strict;
use warnings;

use Cwd;
use LWP::UserAgent;
use Term::ANSIColor;
use XML::RSS::Parser;
use YAML::Tiny;

# globals
my $yaml;

# bind interrupt handlers
$SIG{USR1} = \&load_config;

# initial config load
&load_config();

# create a UA
my $ua = LWP::UserAgent->new();
$ua->agent("gabu/1.2.1");

# logging functions
sub colored_message()
{
	my $color = shift;
	my $message = shift;

	return color($color) . $message . color("reset") . "\n";
}

sub load_config
{
	my @files;

	if (defined($ENV{XDG_CONFIG_HOME})) {
		push(@files, $ENV{XDG_CONFIG_HOME} . "/gabu.yaml");
	}

	push(@files, (
		"$ENV{HOME}/.config/gabu.yaml",
		"/usr/local/etc/gabu.yaml",
		"/etc/gabu.yaml",
		Cwd::abs_path($0) . "/../etc/gabu.yaml"
	));

	foreach my $file (@files) {
		if (-f $file) {
			$yaml = YAML::Tiny->read($file);

			print(&colored_message("white", "Loaded config at $file"));

			return;
		}
	}

	print(&colored_message("bold red", "Could not find a configuration file:"));

	foreach my $file (@files) {
		print("\t$file\n");
	}

	die();
}

while (1) {
	my @feeds = @{$yaml->[0]->{feeds}};

	foreach my $feed (@feeds) {
		if ($yaml->[0]->{verbose}) {
			print(&colored_message("blue", $feed->{url}));
		}

		# fetch the rss feed
		my $response = $ua->get($feed->{url});

		if (!$response->is_success) {
			warn(&colored_message("red", $response->status_line));
		}

		# parse the feed
		my $parser = XML::RSS::Parser->new();
		my $rss = $parser->parse_string($response->decoded_content());
			
		if (!$rss) {
			warn(&colored_message("red", $parser->errstr));
			next;
		}

		foreach my $node ($rss->query("//item")) {
			chomp(my $title = $node->query("title")->text_content);

			if ($yaml->[0]->{verbose}) {
				print(&colored_message("bright_white", " $title"));
			}

			my $found = 0;
			my @regexes = @{$feed->{regexes}};

			foreach my $regex (@regexes) {
				if ($title =~ m/$regex/gi) {
					if ($yaml->[0]->{verbose}) {
						print(&colored_message("green", "  $regex"));
					}

					$found = 1;
					last;
				}
			}

			if (!$found) {
				next;
			}

			chomp(my $link = $node->query("link")->text_content);

			my $torrent = $ua->get($link);

			if (!$torrent->is_success) {
				warn(&colored_message("red", $torrent->status_line));
				next;
			}

			(my $filename = $title) =~ s/ //g;
			my $file = "$yaml->[0]->{watchdir}/$filename.torrent";

			open(my $fh, ">", $file);

			if (!$fh) {
				warn(&colored_message("red", "Could not open filehandle at $file"));
				next;
			}

			print $fh $torrent->decoded_content();

			close($fh);

			print(&colored_message("bold blue", "   $file"));
		}
	}

	if ($yaml->[0]->{timeout} == 0) {
		exit(0);
	}

	sleep($yaml->[0]->{timeout});
}

